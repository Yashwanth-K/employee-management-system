name: Build and Push Docker Image

on:
  push:
    branches:
      - main  # change if you use 'master' or another branch

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3 #	Gets your code

#      adding the below step to set up JDK 17, and build .jar file before docker build
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant permission for Gradle
        run: chmod +x gradlew

      - name: Build Spring Boot app with Gradle
        run: ./gradlew clean build
#       till here

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 #prepares docker build

      - name: Log in to DockerHub
        uses: docker/login-action@v3 #	Logs into DockerHub securely
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5 #Builds and pushes image as latest tag to DockerHub
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/employee-management-app:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3 # allows secure file transfer and remote command execution on server vis SSH
        with: # Indicates the input parameters for the scp-action
          host: ${{ secrets.EC2_HOST }} #specify the EC2 instance IP address
          username: ${{ secrets.EC2_USERNAME }} #specify the username to login to EC2
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |  #defines multi line script to be executed on EC2 after connecting vis SSH
            docker pull ${{ secrets.DOCKER_USERNAME }}/employee-management-app:latest 
            docker stop employee-management-app || true
            docker rm employee-management-app || true
            docker run -d --name employee-management-app -p 8080:8080 --restart unless-stopped ${{ secrets.DOCKER_USERNAME }}/employee-management-app:latest
#        the container restarts automatically unless explicitly stopped.

